#Configuring Your Pods Using ConfigMaps and Secrets
#Understanding what ConfigMaps and Secrets are
#Configuring your Pods using the ConfigMap object
#Managing sensitive configuration with the Secret object
#API keys to access an Amazon S3 bucket
#The password of the MySQL server used by your application
#The endpoint of a Redis cluster used by your application
#Pre-computed values such as JWT token private keys
#Listing ConfigMaps
#kubectl get configmaps
#kubectl get cm
#Creating a ConfigMap
#kubectl create configmap my-first-configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: myconfigmap
kubectl create cm my-third-configmap --from-literal=color=blue
kubectl create cm my-fourth-configmap --from-literal=color=blue --from-literal=version=1 --from-literal=environment=prod
kubectl get cm
#delarative
apiVersion: v1
kind: ConfigMap
metadata:
  name: fifth-configmap
data:
  color: "blue"
  version: "1"
  environment: "prod"
#Storing entire configuration files in a ConfigMap
#The good news is that you can mix literal values and files inside a ConfigMap. Literal values are meant to be short strings, whereas files are just treated as longer strings: they are not two different data types
echo "I'm just a dummy config file" >> $HOME/configfile.txt
kubectl create cm my-sixth-configmap --from-literal=color=yellow --from-file=$HOME/configfile.txt
kubectl get cm
# declarative
apiVersion: v1
kind: ConfigMap
metadata:
  name: seventh-configmap
data:
  color: "blue"
  configfile.txt:
kubectl create -f my-seventh-configmap.yaml
kubectl get cm
#Creating a ConfigMap from an env file
~/my-env-file.txt:
hello=world
color=blue
release=1.prod=true
kubectl create cm my-eigth-configmap --from-env-file=my-env-file.txt
kubectl get cm my-eight-configmap
#Reading values inside a ConfigMap
kubectl describe cm my-fourth-configmap
#Linking ConfigMaps as environment variables
#Please note that it's impossible to link a ConfigMap to a Pod with the kubectl imperative method. The reason is that it's impossible to create a Pod referencing a ConfigMap directly from the kubectl run command. You will have to write some YAML files to use your ConfigMaps in your Pods.
apiVersion: v1
kind: Pod
metadata:
  name: nginx-Pod-with-configmap
spec:
  containers:
    - name: nginx-container-with-configmap
      image: nginx:latest
      env:
        - name: COLOR #Any other name works here.
          valueFrom:
            configMapKeyRef:
              name: my-third-config
              key: color
        kubectl create -f ~/nginx-Pod-with-configmap.yaml
        kubectl exec Pods/nginx-Pod-with-configmap -- env

        PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    #ou should see the COLOR environment variable in the output if your ConfigMap has been linked to your Pod correctly.
    kubectl delete Pods/nginx-Pod-with-configmap
    #Now, we are going to link another ConfigMap, the one called my-fourth-configmap. This time, we don't want to retrieve a single value in this ConfigMap, but all the values inside of it. Here is the updated YAML Pod manifest. This time, we don't use individual env keys, but an envFrom key in our container spec:
    # # ~/nginx-Pod-with-configmap.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-with-configmap
spec:
  containers:
    - name: nginx-container-with-configmap
      image: nginx:latest
      envFrom:
        - configMapRef:
            name: my-fourth-configmap
    kubectl create -f nginx-Pod-with-
    #Now, let's run the env command once more in the nginx container using the kubectl exec command to list the environment variables:
  kubectl exec Pods/nginx-Pod-with-configmap -- env
  #Mounting a ConfigMap as a volume mount
  #Earlier in this chapter, we created two ConfigMaps that store dummy configuration files. Kubectl allows you to mount a ConfigMap inside a Pod as a volume. This is especially useful when the ConfigMap contains the content of a file that you want to inject into a container's filesystem.
   kubectl delete Pods/nginx-Pod-with-configmap
  # ~/nginx-Pod-with-configmap-volume.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-Pod-with-configmap-volume
spec:
  volumes:
    - name: configuariton-volume
      configMap:
        name: sixth-configma
  containers:
    - name: nginx-container-with-configmap
      image: nginx:latest
      volumeMounts:
        - name: configuration-volume # match the volume name
          mountpath: /etc/conf
#Here, we declared a volume named configuration volume at the same level as the containers, and we told Kubernetes that this volume was built from a ConfigMap. The referenced ConfigMap (here, my-sixth-configmap) must be present in the cluster when we apply this file. Then, at the container level, we mounted the volume we declared earlier on path /etc/conf:. The parameter in the ConfigMap should be present at the specified location.
kubectl create -f nginx-Pod-with-configmap-volume.yaml
kubectl exec Pods/nginx-Pod-with-configmap-volume -- ls
#Let's run the cat command to make sure both files hold the correct values:
kubectl exec Pods/nginx-Pod-with-configmap-volume -- cat /etc/conf/color
kubectl exec Pods/nginx-Pod-with-configmap-volume -- cat /etc/conf/configfile.txt
kubectl delete cm my-first-configmap
#Updating a ConfigMap
#Managing sensitive configuration with the Secret object
#he difference is that Secrets are encoded and intended to host sensitive data such as passwords, tokens, or private API keys, while ConfigMaps are intended to host non-sensitive configuration data. Other than that, Secrets and ConfigMaps mostly behave the same.
#Listing Secrets
kubectl get secret
#Creating a Secret imperatively with --from-literal
kubectl create secret generic my-first-secret --from-literal='db_password=my-db-password'
kubectl get secrets
#Creating a Secret declaratively with a YAML file
#t is also possible to create a secret declaratively from a YAML file. However, you will have to include an additional step: you will have to encode your secret parameter in a base64. The reason is we would need to include your secret value in a YAML file, and since these values are supposed to be sensitive, we do not want the hardcoded value to appear in the YAML file.
#
#When you use --from-literal, Kubernetes will encode your strings in base64 itself, but when you create a Secret from a YAML manifest file, you will have to handle this step yourself.
#So, let's start by converting the my-db-password string into base64:
echo 'my-db-password' | base64
# ~/secret-from-file.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-second-secret
type: Opaque
data:
  db_passsord: bXktZGItcGFzc3dvcmQK from line 131
kubectl create -f ~/secret-from-file.yaml
kubectl get secret
#Creating a Secret with content from a file
echo -n 'mypassword' > ./password.txt
kubectl create secret generic mypassword â€“from-file=./password.txt
kubectl describe secret/mypassword


